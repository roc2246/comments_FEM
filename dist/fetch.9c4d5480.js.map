{"version":3,"sources":["js/fetch.js"],"names":["httpRequest","update","id","fetch","concat","method","headers","body","JSON","stringify","then","response","ok","Error","json","data","catch","error","console","vote","scoreContianer","mode","postContainer","parentElement","content","change","score","innerText","childNodes","x","comments","y","replies","reply","post","src","postData","params","delete","_delete","options","log"],"mappings":"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","file":"fetch.9c4d5480.js","sourceRoot":"..\\src","sourcesContent":["  // METHODS - HTTP REQUESTS\n  const httpRequest = {\n    update: function (id, update) {\n      fetch(`http://localhost:3000/update/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json', // You may need to adjust the content type based on your application's needs\n        },\n        body: JSON.stringify(update) // If you have data to send in the request, it needs to be converted to a JSON string\n      })\n        .then(response => {\n          if (!response.ok) {\n            throw new Error('Network response was not ok');\n          }\n          return response.json(); // If you expect JSON data in the response\n        })\n        .then(data => {\n          // Handle the response data here\n        })\n        .catch(error => {\n          console.error('Error:', error);\n        });\n    },\n    vote: function (scoreContianer, mode) {\n      const postContainer = scoreContianer.parentElement.parentElement;\n      let content;\n      let change;\n      let score = scoreContianer.innerText;\n      mode === \"upvote\" ? (change = score++) : (change = score--);\n      if (postContainer.childNodes[3].childNodes[1]) {\n        content = postContainer.childNodes[3].childNodes[1];\n      } else {\n        content = postContainer.childNodes[3];\n      }\n      for (let x in comments) {\n        if (comments[x].content === content) {\n          comments[x].score = change;\n        } else {\n          for (let y in comments[x].replies[y]) {\n            const reply = comments[x].replies[y];\n            if ((reply.content = content)) {\n              reply.score = change;\n            }\n          }\n        }\n      }\n    },\n    post: function (src) {\n      const postData = src;\n      const params = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(postData),\n      };\n      // Possible put id here to insert new replies and replytoreplies to database\n      fetch(\"http://localhost:3000/newPost\", params).then((response) => {\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        return response.json();\n      });\n    },\n    delete: function (id) {\n      const options = {\n        method: \"DELETE\", // Use the DELETE HTTP method\n        headers: {\n          \"Content-Type\": \"application/json\", // Set the content type if needed\n          // You may also need to include authentication headers or other headers here\n        },\n      };\n\n      // Send the DELETE request\n      fetch(`http://localhost:3000/delete/${id}`, options)\n        .then((response) => {\n          if (response.ok) {\n            // Resource successfully deleted\n            console.log(\"Resource deleted successfully\");\n          } else {\n            // Handle error cases here\n            console.error(\"Error deleting resource\");\n          }\n        })\n        .catch((error) => {\n          console.error(\"Fetch error:\", error);\n        });\n    },\n  };"]}
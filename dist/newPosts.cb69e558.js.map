{"version":3,"sources":["js/newPosts.js"],"names":[],"mappings":"AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA","file":"newPosts.cb69e558.js","sourceRoot":"..\\src","sourcesContent":["// // CRUD\n\n//     // CRUD - FUNCTIONS\n\n//     // CRUD - FUNCTIONS - GET REPLY COUNT\n//     function replyCount(no, type) {\n//         let replyCont;\n//         if (type === \"reply\") {\n//           replyCont = container.form.reply[no].previousElementSibling;\n//         } else if (type === \"replytoreply\") {\n//           replyCont = container.form.replyToReply[no].parentElement;\n//         }\n//         return replyCont.childElementCount;\n//       }\n  \n//       // CRUD - FUNCTIONS - GENERATE ID\n//       function generateID() {\n//         let IDarray = [];\n//         for (let id in comments) {\n//           IDarray.push(comments[id].id);\n//           if (comments[id].replies.length > 0) {\n//             for (let reply in comments[id].replies)\n//               IDarray.push(comments[id].replies[reply].id);\n//           }\n//         }\n//         const ID = Math.max(...IDarray) + 1;\n//         return ID;\n//       }\n  \n//       // CRUD - FUNCTIONS - NEW POST\n//       function newPost(type, source) {\n//         const { currentUser } = data;\n  \n//         const postContainer = document.createElement(\"div\");\n//         postContainer.classList.add(\"comment\");\n  \n//         // adds extra classes if post isn't a comment\n//         if (type === \"reply\") {\n//           postContainer.classList.add(\"comment--reply\");\n//         } else if (type === \"replytoreply\") {\n//           postContainer.classList.add(\"comment--reply\");\n//           postContainer.classList.add(\"comment--replytoreply\");\n//         }\n//         postContainer.classList.add(\"comment--you\");\n  \n//         // generates child elements for new post\n//         const newComment = {\n//           avatar: element.avatar(source),\n//           username: element.username(source),\n//           createdAt: element.createdAt(source),\n//           content: element.content(source),\n//           updateForm: element.updateForm(source),\n//           vote: element.vote(source),\n//           CRUD: element.CRUD(source),\n//         };\n//         for (let ele in newComment) {\n//           if (newComment[ele] !== newComment.updateForm) {\n//             postContainer.append(newComment[ele]);\n//           }\n//         }\n//         if (currentUser[0].username === source.user.username) {\n//           postContainer.append(newComment.updateForm);\n//         }\n  \n//         // adds reply class to crud container\n//         if (type === \"reply\") {\n//           newComment.CRUD.classList.add(\"CRUD-container--reply\");\n//         }\n  \n//         // Adds CRUD functionality\n//         CRUDFunction.delete(postContainer);\n  \n//         return postContainer;\n//       }\n  \n//       // CRUD - DOM MANIPULATION\n//       // CRUD - DOM MANIPULATION - NEW COMMENT\n//       container.form.comment.addEventListener(\"submit\", (e) => {\n//         e.preventDefault();\n  \n//         const { comments, currentUser } = data;\n//         const content = document.querySelector(selectors.input.comment).value;\n  \n//         const newComment = {\n//           id: generateID(),\n//           content: content,\n//           createdAt: \"TEST\",\n//           score: 0,\n//           user: {\n//             image: {\n//               png: currentUser[0].image.png,\n//               webp: currentUser[0].image.webp,\n//             },\n//             username: currentUser[0].username,\n//           },\n//           replies: [],\n//         };\n  \n//         // Adds comment in data\n//         httpRequest.post(newComment);\n//         comments.push(newComment);\n  \n//         // Adds comment in DOM\n//         const wrapper = document.getElementById(\"comment-wrapper\");\n//         wrapper.appendChild(newPost(\"comment\", newComment));\n//       });\n  \n//       // CRUD - DOM MANIPULATION - NEW REPLY\n//       for (let x = 0; x < container.form.reply.length; x++) {\n//         container.form.reply[x].addEventListener(\"submit\", (e) => {\n//           e.preventDefault();\n  \n//           const { comments, currentUser } = data;\n//           const replyTo = container.input.replyTo[x].innerText;\n//           const content = container.input.replyContent[x].value;\n  \n//           const newReply = {\n//             id: generateID(),\n//             content: content,\n//             createdAt: \"TEST\",\n//             replyingTo: replyTo,\n//             replies: {},\n//             score: 0,\n//             user: {\n//               image: {\n//                 png: currentUser[0].image.png,\n//                 webp: currentUser[0].image.webp,\n//               },\n//               username: currentUser[0].username,\n//             },\n//           };\n  \n//           if (comments[x].replies.length === 0) {\n//             // Creates container for replies\n//             const replyCont = document.createElement(\"div\");\n//             replyCont.classList.add(\"reply-wrapper\");\n//             const hr = document.createElement(\"hr\");\n//             hr.classList.add(\"reply-wrapper__ruler\");\n//             replyCont.appendChild(hr);\n//             container.comments[x].insertAdjacentElement(\"afterend\", replyCont);\n  \n//             // Adds reply in data\n//             comments[x].replies[newReply.id] = newReply;\n  \n//             // Adds reply in DOM\n//             replyCont.appendChild(newPost(\"reply\", newReply));\n  \n//             // Generates hr height for reply container\n//             replyCont.style.gridTemplateRows = `repeat(${replyCount(\n//               x,\n//               \"reply\"\n//             )}, auto)`;\n//           } else {\n//             comments[x].replies[newReply.id] = newReply;\n  \n//             const replyWrapper = container.form.reply[x].previousElementSibling;\n//             replyWrapper.appendChild(newPost(\"reply\", newReply));\n  \n//             // Generates hr height for reply container\n//             replyWrapper.style.gridTemplateRows = `repeat(${replyCount(\n//               x,\n//               \"reply\"\n//             )}, auto)`;\n//           }\n//           // comments[x].replies[comments[x].replies.length + 1].push(newReply);\n//           httpRequest.post(newReply)\n//         });\n//       }\n  \n//       //  CRUD - DOM MANIPULATION - NEW REPLY TO REPLY\n//       for (let x = 0; x < container.form.replyToReply.length; x++) {\n//         container.form.replyToReply[x].addEventListener(\"submit\", (e) => {\n//           e.preventDefault();\n  \n//           const { comments, currentUser } = data;\n//           const replyTo = container.input.replyReplyTo[x].innerText;\n//           const parentUser = container.input.replyReplyTo[x].parentElement.parentElement.previousElementSibling.childNodes[1].innerText\n//           const content = container.input.replyToReplyContent[x].value;\n//           console.log(parentUser)\n  \n//           const newReply = {\n//             id: generateID(),\n//             content: content,\n//             createdAt: \"TEST\",\n//             replyingTo: replyTo,\n//             parentUser: parentUser,\n//             replies: {},\n//             score: 0,\n//             user: {\n//               image: {\n//                 png: currentUser[0].image.png,\n//                 webp: currentUser[0].image.webp,\n//               },\n//               username: currentUser[0].username,\n//             },\n//           };\n  \n//           // Adds replytoreply in DOM\n//           const replyWrapper = container.form.replyToReply[x].parentNode;\n//           replyWrapper.appendChild(newPost(\"replytoreply\", newReply));\n  \n//           // Generates hr height for reply container\n//           replyWrapper.style.gridTemplateRows = `repeat(${replyCount(\n//             x,\n//             \"replytoreply\"\n//           )}, auto)`;\n  \n//           // Adds replytoreply in data\n//           const parentComment =\n//             replyWrapper.previousSibling.childNodes[3].childNodes[0].innerText;\n//           for (let x in comments) {\n//             if (comments[x].content === parentComment) {\n//               const replies = comments[x].replies;\n//               replies[replies.length] = newReply;\n//             }\n//           }\n  \n//           httpRequest.post(newReply)\n//         });\n//       }\n  \n//       // CRUD - DOM MANIPULATION - UPDATE\n//       for (let x = 0; x < container.form.update.length; x++) {\n//         container.form.update[x].addEventListener(\"submit\", (e) => {\n//           e.preventDefault();\n  \n//           // Sets post content\n//           let oldContent;\n//           if (\n//             container.input.update[x].parentElement.parentElement.childNodes[3]\n//               .childNodes[1]\n//           ) {\n//             oldContent =\n//               container.input.update[x].parentElement.parentElement.childNodes[3]\n//                 .childNodes[1];\n//           } else {\n//             oldContent =\n//               container.input.update[x].parentElement.parentElement.childNodes[3]\n//                 .childNodes[0];\n//           }\n  \n//           // Sets id of updated comment\n//           let id\n//           for(let x in comments){\n//             if (oldContent.innerText ===comments[x].content){\n//               id = comments[x].id\n//             } else {\n//               for(let y in comments[x].replies){\n//                 if (oldContent.innerText ===comments[x].replies[y].content){\n//                   id = comments[x].replies[y].id\n//                 }\n//               }\n//             }\n//           }\n  \n//           // Stores new text for content\n//           const newContent = container.input.update[x].value;\n  \n//           // Updates post in data\n//           httpRequest.update(id, {content: newContent});\n  \n//           // Updates post in DOM\n//           oldContent.innerText = newContent;\n//         });\n//       }\n  \n//       // VOTE\n//       // VOTE - FUNCTION\n//       function vote(mode) {\n//         const vote = document.getElementsByClassName(`vote__btn--${mode}`);\n//         for (let x = 0; x < vote.length; x++) {\n//           vote[x].addEventListener(\"click\", (e) => {\n//             e.preventDefault();\n  \n//             // Changes score in DOM\n//             const scoreContianer = vote[x].parentElement.childNodes[1];\n//             let score = scoreContianer.innerText;\n//             mode === \"upvote\" ? score++ : score--;\n//             scoreContianer.innerText = score;\n  \n//             // Changes score in data\n//             mode === \"upvote\"\n//               ? httpRequest.vote(scoreContianer, \"upvote\")\n//               : httpRequest.vote(scoreContianer, \"downvote\");\n//           });\n//         }\n//       }\n  \n//       // VOTE - UPVOTE\n//       vote(\"upvote\");\n  \n//       // VOTE - DOWNVOTE\n//       vote(\"downvote\");"]}